import tkinter as tk
from datetime import datetime
import os
import json

TASKS_FILE = "tasks.json"

# Define a custom font
custom_font = ("Arial", 12)

def load_tasks():
    if os.path.exists(TASKS_FILE):
        with open(TASKS_FILE, "r") as file:
            return json.load(file)
    else:
        return []

def save_tasks(tasks):
    with open(TASKS_FILE, "w") as file:
        json.dump(tasks, file, indent=2)

def toggle_completed(task_number):
    tasks[task_number]['completed'] = not tasks[task_number]['completed']
    save_tasks(tasks)
    list_tasks()

def add_task():
    title = entry_title.get()
    description = entry_description.get()
    due_date_str = entry_due_date.get()

    try:
        due_date = datetime.strptime(due_date_str, "%Y-%m-%d").date()
    except ValueError:
        output_label.config(text="Invalid date format. Please use YYYY-MM-DD.", font=custom_font)
        return

    task = {"title": title, "description": description, "due_date": str(due_date), "completed": False}
    tasks.append(task)
    save_tasks(tasks)
    output_label.config(text="Task added successfully!", font=custom_font)
    list_tasks()

    entry_title.delete(0, tk.END)
    entry_description.delete(0, tk.END)
    entry_due_date.delete(0, tk.END)
    entry_delete_task.delete(0, tk.END)    

def delete_task():
    try:
        task_number = int(entry_delete_task.get()) - 1
        if 0 <= task_number < len(tasks):
            deleted_task = tasks.pop(task_number)
            save_tasks(tasks)
            output_label.config(text=f"Task '{deleted_task['title']}' deleted successfully!", font=custom_font)
            list_tasks()
        else:
            output_label.config(text="Invalid task number.", font=custom_font)
    except ValueError:
        output_label.config(text="Invalid input. Please enter a number.", font=custom_font)

    entry_title.delete(0, tk.END)
    entry_description.delete(0, tk.END)
    entry_due_date.delete(0, tk.END)
    entry_delete_task.delete(0, tk.END)

    

def list_tasks():
    tasks_text = "Tasks:\n"
    for i, task in enumerate(tasks, start=1):
        status = "Completed" if task['completed'] else "Incomplete"
        tasks_text += f"{i}. Title: {task['title']}\n   Description: {task['description']}\n   Due Date: {task['due_date']}\n   Status: {status}\n\n"
        
        checkbox = tk.Checkbutton(root, command=lambda i=i-1: toggle_completed(i), font=custom_font, bg='#f5f5dc')
        checkbox.select() if task['completed'] else checkbox.deselect()
        checkbox.grid(row=i+6, column=2, sticky="w")
    
    output_label.config(text=tasks_text, font=custom_font, bg='#f5f5dc')

    entry_title.delete(0, tk.END)
    entry_description.delete(0, tk.END)
    entry_due_date.delete(0, tk.END)
    entry_delete_task.delete(0, tk.END)
    
def enter_fullscreen(event):
    root.attributes("-fullscreen", True)
    root.after(100, center_widgets)

def exit_fullscreen(event):
    root.attributes("-fullscreen", False)
    center_widgets()

def center_widgets():
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()

    root_width = root.winfo_reqwidth()
    root_height = root.winfo_reqheight()

    x_position = (screen_width - root_width) // 2
    y_position = (screen_height - root_height) // 2

    root.geometry(f"+{x_position}+{y_position}")

# Create the main window
root = tk.Tk()
root.title("Task Management")

#Background colour
root.configure(bg= '#f5f5dc')

# Initialize tasks
tasks = load_tasks()

# Create and place widgets with the custom font
label_title = tk.Label(root, text="Task Title:", font=custom_font)
label_description = tk.Label(root, text="Task Description:", font=custom_font)
label_due_date = tk.Label(root, text="Due Date (YYYY-MM-DD):", font=custom_font)
label_delete_task = tk.Label(root, text="Task Number to Delete:", font=custom_font)

entry_title = tk.Entry(root, font=custom_font)
entry_description = tk.Entry(root, font=custom_font)
entry_due_date = tk.Entry(root, font=custom_font)
entry_delete_task = tk.Entry(root, font=custom_font)

button_add_task = tk.Button(root, text="Add Task", command=add_task, font=custom_font)
button_delete_task = tk.Button(root, text="Delete Task", command=delete_task, font=custom_font)
button_list_tasks = tk.Button(root, text="List Tasks", command=list_tasks, font=custom_font)

output_label = tk.Label(root, text="", font=custom_font)

label_title.grid(row=0, column=0, sticky="e")
label_description.grid(row=1, column=0, sticky="e")
label_due_date.grid(row=2, column=0, sticky="e")
label_delete_task.grid(row=3, column=0, sticky="e")

entry_title.grid(row=0, column=1, padx=10, pady=10)
entry_description.grid(row=1, column=1, padx=10, pady=10)
entry_due_date.grid(row=2, column=1, padx=10, pady=10)
entry_delete_task.grid(row=3, column=1, padx=10, pady=10)

button_add_task.grid(row=4, column=1, pady=10)
button_delete_task.grid(row=5, column=1, pady=10)
button_list_tasks.grid(row=6, column=1, pady=10)

output_label.grid(row=7, column=0, columnspan=2, pady=10)

# Bind fullscreen events
root.bind("<F11>", enter_fullscreen)
root.bind("<Escape>", exit_fullscreen)

# Center widgets when starting in fullscreen
center_widgets()

# Start the Tkinter event loop
root.mainloop()